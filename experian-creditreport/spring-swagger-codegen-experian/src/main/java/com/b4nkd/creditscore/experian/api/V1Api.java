/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.b4nkd.creditscore.experian.api;

import com.b4nkd.creditscore.experian.model.AutoCreditProfileRequest;
import com.b4nkd.creditscore.experian.model.ConnectCreditProfileRequest;
import com.b4nkd.creditscore.experian.model.CreditProfileResponseForAutomotiveCreditData;
import com.b4nkd.creditscore.experian.model.CreditProfileResponseForEmploymentInsightData;
import com.b4nkd.creditscore.experian.model.CreditProfileResponseForExtendedView;
import com.b4nkd.creditscore.experian.model.CreditProfileResponseForHealthcareCreditData;
import com.b4nkd.creditscore.experian.model.CreditProfileResponseForTECCreditData;
import com.b4nkd.creditscore.experian.model.CreditProfileResponseForconnectcheckcreditData;
import com.b4nkd.creditscore.experian.model.EmploymentInsightRequest;
import com.b4nkd.creditscore.experian.model.ErrorResponse;
import com.b4nkd.creditscore.experian.model.ExtendedViewRequest;
import com.b4nkd.creditscore.experian.model.HealthcareCreditRequest;
import com.b4nkd.creditscore.experian.model.TecCreditProfileRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-10-29T21:15:39.351011500Z[Europe/London]")
@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    @ApiOperation(value = "Automotive Credit Profile", nickname = "automotiveCreditProfileData", notes = "The Automotive Profile Summary is geared toward helping automotive lenders' and dealers' credit decisions. This feature is available on Experian's Credit Profile and provides a fast at-a-glance analysis of a consumers automotive finance history. <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc.", response = CreditProfileResponseForAutomotiveCreditData.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForAutomotiveCreditData.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/automotive-credit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForAutomotiveCreditData> automotiveCreditProfileData(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody AutoCreditProfileRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);


    @ApiOperation(value = "Connect Check Credit Profile", nickname = "connctCheckCreditProfileData", notes = "Connect Check is a custom verification process designed specifically to assist the utility, telecommunication and cable industries detect fraud and minimize risk exposure at the time of a service request. Connect Check is focused on the top 100 regulated utility and telecommunications companies that are obligated to \"serve all who apply.\" However, Connect Check can also be a valuable tool for smaller market segments. With Connect Check, service representatives, regardless of their level of credit training, can make immediate and informed service decisions while the applicant is still on the line.  <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc.", response = CreditProfileResponseForconnectcheckcreditData.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForconnectcheckcreditData.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/connect-check",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForconnectcheckcreditData> connctCheckCreditProfileData(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody ConnectCreditProfileRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);


    @ApiOperation(value = "Employment Insight", nickname = "employmentInsightData", notes = "Employment Insight, a slightly modified version of the Experian Credit Profile report, contains consumer identification, employment history, and credit information used to substantiate information during the hiring or promotion process. As a verification tool, it is used to spot inconsistencies in address and employment information, confirm Social Security numbers, and reveal other names used. Credit information provided may provide insight on an applicant's responsibility toward his/her obligations. <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc.", response = CreditProfileResponseForEmploymentInsightData.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForEmploymentInsightData.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/employment-insight",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForEmploymentInsightData> employmentInsightData(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody EmploymentInsightRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);


    @ApiOperation(value = "Extended View Attributes and Score", nickname = "extendedViewAttributesAndScore", notes = "Retrieves a credit profile with scores and addons requested. If unable to get a credit report from Experian for this consumer, then we will automatically waterfall to Extended View module for this consumer and return back the Extended View Attributes and Score. <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc.", response = CreditProfileResponseForExtendedView.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForExtendedView.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/extended-view-attributes-and-score",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForExtendedView> extendedViewAttributesAndScore(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody ExtendedViewRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);


    @ApiOperation(value = "Extended View Attributes Only", nickname = "extendedViewAttributesOnly", notes = "Retrieves a credit profile with scores and addons requested. If unable to get a credit report from Experian for this consumer, then we will automatically waterfall to Extended View module for this consumer and return back the Extended View Attributes. <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc.", response = CreditProfileResponseForExtendedView.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForExtendedView.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/extended-view-attributes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForExtendedView> extendedViewAttributesOnly(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody ExtendedViewRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);


    @ApiOperation(value = "Extended View Score Only", nickname = "extendedViewScoreOnly", notes = "Retrieves a credit profile with scores and addons requested. If unable to get a credit report from Experian for this consumer, then we will automatically waterfall to Extended View Scoring for this consumer and return back the Extended View Score. <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc. ", response = CreditProfileResponseForExtendedView.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForExtendedView.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/extended-view-score",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForExtendedView> extendedViewScoreOnly(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody ExtendedViewRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);


    @ApiOperation(value = "Healthcare Credit Profile", nickname = "healthcareCreditProfileData", notes = "The Healthcare Profile is a credit profile report designed specifically for the healthcare industry. It consists of a standard credit report in which unused fields are suppressed plus an optional Healthcare Summary segment. <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc.", response = CreditProfileResponseForHealthcareCreditData.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForHealthcareCreditData.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/healthcare-credit-profile",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForHealthcareCreditData> healthcareCreditProfileData(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody HealthcareCreditRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);


    @ApiOperation(value = "TEC Connect Credit Profile", nickname = "tECConnctCreditProfileData", notes = "TEC Connect is designed to evaluate consumer risk within the telecommunications, energy and cable (TEC) space. An empirically-driven, statistically sound risk prediction model, TEC Connect leverages a consumer's actual service payment history, predicting the likelihood of serious delinquent/derogatory behavior over the next 12 months. Utilizing the latest data assets and Experian's best-in-class analytics, TEC Connect empowers lenders to set security deposits, grant firm credit offers and even pre-screen profitable consumers before the competition. TEC Connect even enables lenders to rank-order consumers by their potential risk for seriously derogatory behavior. <br><br>We are providing non-executable \"Request schema\" which contains all request parameters and executable 10 test cases for client testing under \"Examples\" dropdown below which includes first 5 positive test cases and rest 5 negative test cases. Eg: Success_1, Failure_Invalid surname etc.", response = CreditProfileResponseForTECCreditData.class, authorizations = {
        @Authorization(value = "OauthSecurity", scopes = { 
            @AuthorizationScope(scope = "user", description = "user scope")
            })    }, tags={ "Consumer Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "API responds with a JSON.", response = CreditProfileResponseForTECCreditData.class),
        @ApiResponse(code = 400, message = "Client Exception due to invalid data.", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "Request Forbidden.", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Not found Data.", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Related Error.", response = ErrorResponse.class),
        @ApiResponse(code = 504, message = "Timeout.", response = ErrorResponse.class) })
    @RequestMapping(value = "/v1/tec-connect-credit",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreditProfileResponseForTECCreditData> tECConnctCreditProfileData(@ApiParam(value = "Input Request format" ,required=true, allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Content-Type", required=true) String contentType
,@ApiParam(value = "Consumer's PII , Requestor Information, Addons and any custom options to be specified here." ,required=true )  @Valid @RequestBody TecCreditProfileRequest body
,@ApiParam(value = "API client generated reference Id to uniquely identify the API request." , allowableValues="SBMYSQL", defaultValue="SBMYSQL") @RequestHeader(value="clientReferenceId", required=false) String clientReferenceId
,@ApiParam(value = "Output Response format" , allowableValues="application/json", defaultValue="application/json") @RequestHeader(value="Accept", required=false) String accept
);

}

